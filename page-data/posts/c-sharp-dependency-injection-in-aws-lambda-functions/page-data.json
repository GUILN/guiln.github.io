{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/c-sharp-dependency-injection-in-aws-lambda-functions","result":{"data":{"markdownRemark":{"id":"521d00e2-b997-5567-a140-af47c9daf8a9","html":"<ul>\n<li><a href=\"#context\">Context</a></li>\n<li><a href=\"#dependency-inversion-principle\">Dependency Inversion Principle</a></li>\n<li><a href=\"#writing-some-code\">Writing Some Code</a></li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n</ul>\n<p>An Intro about Dependency injection in Lambda environment</p>\n<h2 id=\"context\" style=\"position:relative;\"><a href=\"#context\" aria-label=\"context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context</h2>\n<p>When working with .Net core AWS lambda functions, we do not have some fancy hooks that ables us to wire the dependencies in runtime.\nThis situation leaves us by ourselves to add the necessary code that overcomes this situation.</p>\n<h2 id=\"dependency-inversion-principle\" style=\"position:relative;\"><a href=\"#dependency-inversion-principle\" aria-label=\"dependency inversion principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Inversion Principle</h2>\n<p>Despite the fact we won’t have option to use dotnet core’s <code class=\"language-text\">IoC Container</code> in it entire functionality, is not complicated to keep the dependency inversion or injection principle, at the end of the day the most important to keep from this principle is to make sure that we can inject the dependencies and keep our lambda as flexible through different environments and as testable as it would be when working in a “pure” dotnet core environment.\nSo, with that in mind we will go through a simple, yet efficient approach. Which reminds me the words of <em>Gary McLean Hall</em> in book <em>Adaptive Code Via C#: Agile coding with design patterns and SOLID principles</em>: </p>\n<blockquote>\n<p>When something is so simple, yet so important, people tend to overcomplicate it. DI is no exception…</p>\n<p>— Gary McLean Hall</p>\n</blockquote>\n<p>So, I’ll present in next few lines the most fancy <code class=\"language-text\">Poor Man&#39;s</code> DI that I’ve ever written. Let’s write, and discuss some code focusing in:</p>\n<ul>\n<li>Keeping the DI (Most important)</li>\n<li>Avoiding DI anti patterns (<code class=\"language-text\">Service Locator</code>)</li>\n<li>Making it configurable through environments</li>\n<li>Making it testable!</li>\n<li>Keeping it simple</li>\n</ul>\n<h2 id=\"writing-some-code\" style=\"position:relative;\"><a href=\"#writing-some-code\" aria-label=\"writing some code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing Some Code</h2>\n<p>Let’s start with <code class=\"language-text\">IConfigurationService</code> interface. This interface will be used as a high level container for the overall configuration dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IConfigurationService</span>\n<span class=\"token punctuation\">{</span>\n     <span class=\"token return-type class-name\">IConfiguration</span> <span class=\"token function\">GetConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So <code class=\"language-text\">IConfigurationService</code> will be implemented for each environment, in our case we will only have <code class=\"language-text\">Dev</code> and <code class=\"language-text\">local</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//Dev</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DevConfigurationService</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IConfigurationService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IConfiguration</span> <span class=\"token function\">GetConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddSystemsManager</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/application-config/order-info-config/\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Local</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalConfigurationService</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IConfigurationService</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IConfiguration</span> <span class=\"token function\">GetConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConfigurationBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">AddJsonFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.json\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">IEnvironmentServiceConfiguration</code> will be the interface to be implemented for every environment to wire all services. If we wish to add some different <code class=\"language-text\">ILogger</code> implementation, for example, this is where we should go. Note that I opted to make the environment selection through a static <code class=\"language-text\">Factory Method</code> in the interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IEnvironmentServiceConfiguration</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnvironmentServiceConfiguration</span> <span class=\"token function\">CreateServiceConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> environmentName<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">return</span> environmentName <span class=\"token keyword\">switch</span>\n           <span class=\"token punctuation\">{</span>\n               <span class=\"token string\">\"dev\"</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DevServiceConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string\">\"local\"</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LocalServiceConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               _ <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LocalServiceConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n       \n   <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> serviceCollection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Following, the implementation of the interface above for both <code class=\"language-text\">Dev</code> and <code class=\"language-text\">Local</code> environments.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//Dev</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DevServiceConfiguration</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnvironmentServiceConfiguration</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> serviceCollection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        serviceCollection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConfigurationService<span class=\"token punctuation\">,</span> DevConfigurationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//Local</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalServiceConfiguration</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnvironmentServiceConfiguration</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> serviceCollection<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        serviceCollection<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConfigurationService<span class=\"token punctuation\">,</span> LocalConfigurationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To glue all the DI logic and make it automatically change for each environment, we add a singleton class <code class=\"language-text\">Bootstrapper</code> to wire the environment instantiation logic. Note that in that case we are assuming that expected <code class=\"language-text\">&quot;local&quot;</code> and <code class=\"language-text\">&quot;dev&quot;</code> values will come from <code class=\"language-text\">ENVIRONMENT</code> environment variable. This will allow us to configure different <code class=\"language-text\">ServiceCollections</code> among the different environments. We are also using previously declared factory method to instantiate the implementation of <code class=\"language-text\">IEnvironmentServiceConfiguration</code>, which will be used to configure our service collection.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bootstrapper</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IServiceProvider</span> ServiceProvider <span class=\"token operator\">=></span> _serviceCollection<span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IServiceCollection</span> _serviceCollection<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bootstrapper</span> _instance<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token function\">Bootstrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _serviceCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> environment <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ENVIRONMENT\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span>\n                              <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApplicationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'ENVIRONMENT' must be set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> environmentServiceConfiguration <span class=\"token operator\">=</span>\n                IEnvironmentServiceConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">CreateServiceConfiguration</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            environmentServiceConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span>_serviceCollection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Bootstrapper</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n                _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Bootstrapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>At this point is important to say that, you and your team could easily fall in the temptation of practicing the <code class=\"language-text\">Service Locator</code> anti pattern, this assumption is specially true when using an “home made” IoC container “resolver” because it simply does not feels weird to use your own piece of code to resolve dependencies at any part of your project as it does when dealing with third party IoC container.<br>\nIf you fall in this temptation your project will quickly be with “magic” dependencies that will get hard to debug, and hard to tell what does a method / class needs to work just by looking at it usage. So keep the DI spirit downstream your classes / methods!\nA good metric that I use to avoid this anti pattern is:</p>\n<blockquote>\n<p>Whenever I see the usage of a method / class, I should be able to tell all the dependencies by simply looking at method / object’s constructor parameters. If I’m not able to do that, some magic stuff is going inside that class. You now have “skyhooks” instead of cranes in your code base.</p>\n<p>— Just me quoting myself</p>\n</blockquote>\n<p>The usage in code should be simple, as we assume that DI should always be done in the entry point of our program, the entry point for a lambda function will be the constructor of the <code class=\"language-text\">Function</code> class.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IConfiguration</span> _configurationService<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n          <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>Bootstrapper<span class=\"token punctuation\">.</span><span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span>ServiceProvider\n                            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IConfigurationService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">GetConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Function</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IConfiguration</span> configurationService<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n                      <span class=\"token punctuation\">(</span>_configurationService<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>configurationService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>APIGatewayProxyResponse<span class=\"token punctuation\">></span></span> <span class=\"token function\">FunctionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">APIGatewayProxyRequest</span> apigProxyEvent<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ILambdaContext</span> context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Configured value: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_configurationService<span class=\"token punctuation\">[</span><span class=\"token string\">\"configured-variable-per-environment\"</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token range operator\">..</span><span class=\"token range operator\">..</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The idea of having two constructors for the lambda is that the parameterless one will be called by lambda mechanism itself when you, for example, call <code class=\"language-text\">sam local invoke</code> locally, or when you run your lambda in your <code class=\"language-text\">AWS</code> environment. The constructor that receives <code class=\"language-text\">IConfiguration</code> parameter will be used for testing purposes, so we can easily mock <code class=\"language-text\">IConfigurationService</code> dependency for automated tests. </p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>This approach keeps DI in lambda with the simplicity of using the <code class=\"language-text\">IServiceProvider</code> and <code class=\"language-text\">IServiceCollection</code> from <a href=\"https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft.Extensions.DependencyInjection</a> package to register our dependencies. It also overcomes the lack of a mechanism to wire dependencies between different environments that lambda environments leaves us with.</p>","fields":{"slug":"/posts/c-sharp-dependency-injection-in-aws-lambda-functions","tagSlugs":["/tag/aws/","/tag/lambda/","/tag/serverless/","/tag/c/"]},"frontmatter":{"date":"2021-06-02T22:40:32.169Z","description":"An approach on how to work with dotnet core DI in AWS Lambda environment.","tags":["AWS","Lambda","Serverless","C#"],"title":"C# Dependency Injection in AWS Lambda Functions","socialImage":null}}},"pageContext":{"slug":"/posts/c-sharp-dependency-injection-in-aws-lambda-functions"}},"staticQueryHashes":["251939775","3439816877","401334301"]}